{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/xcaeser/generation-schemas/main/schemas/v1.0.0/image-generation.schema.json",
  "title": "Image Generation Prompt Schema for AI Studio",
  "description": "This schema defines the basic structure for a visual scene description for generative AI models. Detailed options, suggestions, and strong typing are provided by the corresponding TypeScript types. This schema is for basic validation of raw JSON data.",
  "type": "object",
  "required": [
    "scene",
    "subjects",
    "style",
    "lighting",
    "mood",
    "background",
    "composition",
    "camera",
    "color_palette",
    "props",
    "resolution"
  ],
  "properties": {
    "scene": {
      "type": "string",
      "description": "A concise, high-level summary of the entire visual scene. Refer to TypeScript types for detailed examples.\nExamples:\n- 'A lone astronaut discovering an ancient alien artifact on a desolate Mars landscape.'"
    },
    "subjects": {
      "type": "array",
      "description": "Main people or characters in the scene. At least one subject is required. Refer to TypeScript types for the 'Subject' structure.",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": ["type", "description", "pose", "position", "expression"],
        "properties": {
          "type": {
            "type": "string",
            "description": "Category or role (e.g. 'young woman', 'elderly wizard')."
          },
          "description": {
            "type": "string",
            "description": "Visual description including age, features, and clothing."
          },
          "pose": {
            "type": "string",
            "description": "Pose or body language (e.g. 'leaning forward')."
          },
          "position": {
            "type": "string",
            "description": "Visual position in the frame (e.g. 'left foreground')."
          },
          "expression": {
            "type": "string",
            "description": "Facial expression or emotion (e.g. 'smiling softly')."
          }
        }
      }
    },
    "style": {
      "type": "string",
      "description": "The overall artistic or visual style. Refer to TypeScript 'StyleOption' type for suggested values and the option for custom strings."
    },
    "lighting": {
      "type": "string",
      "description": "Lighting style and ambiance. Refer to TypeScript 'LightingOption' type for suggested values and the option for custom strings."
    },
    "mood": {
      "type": "string",
      "description": "Emotional or atmospheric tone. Refer to TypeScript 'MoodOption' type for suggested values and the option for custom strings."
    },
    "background": {
      "type": "object",
      "required": ["elements", "depth_of_field"],
      "description": "Details of the background environment. Refer to TypeScript 'Background' type.",
      "properties": {
        "elements": {
          "type": "array",
          "description": "List of visible background features (e.g. 'bicycles', 'pedestrians').",
          "items": { "type": "string" }
        },
        "depth_of_field": {
          "type": "string",
          "description": "Focus treatment for background. Refer to TypeScript 'DepthOfFieldOption' type for suggested values and the option for custom strings."
        }
      }
    },
    "composition": {
      "type": "string",
      "description": "Visual framing method. Refer to TypeScript 'CompositionOption' type for suggested values and the option for custom strings."
    },
    "camera": {
      "type": "object",
      "required": ["angle", "distance", "focus"],
      "description": "Camera framing details. Refer to TypeScript 'Camera' type.",
      "properties": {
        "angle": {
          "type": "string",
          "description": "Camera angle. Refer to TypeScript 'CameraAngleOption' type for suggested values and the option for custom strings."
        },
        "distance": {
          "type": "string",
          "description": "Camera distance from subjects. Refer to TypeScript 'CameraDistanceOption' type for suggested values and the option for custom strings."
        },
        "focus": {
          "type": "string",
          "description": "Focus point. Refer to TypeScript 'CameraFocusOption' type for suggested values and the option for custom strings."
        }
      }
    },
    "color_palette": {
      "type": "array",
      "description": "Dominant colors to use in the scene. Can be color names or hex codes.\nExamples:\n- `['monochromatic blues', 'warm earth tones', '#FF0000', 'emerald green']`",
      "items": { "type": "string" }
    },
    "props": {
      "type": "array",
      "description": "Items in the scene (e.g. 'coffee cup', 'notebook').",
      "items": { "type": "string" }
    },
    "resolution": {
      "type": "object",
      "description": "Defines the desired output image dimensions, aspect ratio, and DPI. Refer to TypeScript 'Resolution' type.",
      "required": ["width", "height", "aspect_ratio", "dpi"],
      "properties": {
        "width": {
          "type": "integer",
          "description": "The desired width of the output image in pixels."
        },
        "height": {
          "type": "integer",
          "description": "The desired height of the output image in pixels."
        },
        "aspect_ratio": {
          "type": "string",
          "description": "The proportional relationship (W:H). Refer to TypeScript 'AspectRatioOption' type for suggested values or provide custom e.g., '5:4'.",
          "pattern": "^\\d+:\\d+$"
        },
        "dpi": {
          "type": "integer",
          "description": "Dots Per Inch. Specifies the print resolution. Common values: 72 (web), 300 (print)."
        },
        "label": {
          "type": "string",
          "description": "(Optional) A human-readable label for the resolution combination."
        }
      }
    },
    "text_overlays": {
      "type": "array",
      "description": "(Optional) Text elements to display within the image. Refer to TypeScript 'TextOverlay' type.",
      "items": {
        "type": "object",
        "required": ["content", "position"],
        "properties": {
          "content": {
            "type": "string",
            "description": "The text to show."
          },
          "position": {
            "type": "string",
            "description": "Text placement. Refer to TypeScript 'TextPositionOption' type for suggested values or provide custom e.g., 'top-left'."
          },
          "style": {
            "type": "string",
            "description": "Font style and color (e.g. 'bold white serif')."
          },
          "size": {
            "type": "string",
            "description": "Relative or absolute text size (e.g. 'large', '14pt')."
          }
        }
      }
    }
  }
}
